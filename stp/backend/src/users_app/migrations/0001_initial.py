# Generated by Django 5.1.1 on 2024-10-12 10:56

import django.contrib.auth.validators
import users_app.models
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                (
                    "username",
                    models.CharField(
                        max_length=64,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(blank=True, default="", max_length=16, null=True),
                ),
                ("first_name", models.CharField(blank=True, max_length=64)),
                ("last_name", models.CharField(blank=True, max_length=64)),
                ("is_staff", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                ("date_joined", models.DateTimeField(auto_now_add=True)),
                ("avatar_color", models.CharField(blank=True, max_length=7)),
                (
                    "profile_pic",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to=users_app.models.User.img_path,
                        verbose_name="Profile picture",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True, max_length=256, null=True, verbose_name="About"
                    ),
                ),
                (
                    "site_url",
                    models.URLField(
                        blank=True, max_length=128, null=True, verbose_name="Website"
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[("m", "Male"), ("w", "Female")],
                        max_length=1,
                        null=True,
                        verbose_name="Gender",
                    ),
                ),
                (
                    "is_allow_recommends",
                    models.BooleanField(
                        default=True, verbose_name="Allow to recommend profile"
                    ),
                ),
                (
                    "followers",
                    models.ManyToManyField(
                        blank=True, to="users_app.user", verbose_name="Subscribers"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to.",
                        related_name="custom_user_set",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="custom_user_set",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
